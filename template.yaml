AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Event-Driven Architecture with API Gateway, Lambda, SQS, and SNS

Parameters:
  Environment:
    Type: String
    Default: dev
    Description: Environment name

Globals:
  Function:
    Timeout: 30
    Runtime: python3.9
    MemorySize: 128
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment

Resources:
  # SQS Queue
  MessageQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${Environment}-message-queue"
      VisibilityTimeoutSeconds: 60
      MessageRetentionPeriod: 1209600
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 3

  # Dead Letter Queue
  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${Environment}-dlq"

  # SNS Topic
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${Environment}-notification-topic"

  # Producer Lambda Function
  ProducerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-producer-function"
      CodeUri: src/producer/
      Handler: lambda_function.lambda_handler
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt MessageQueue.QueueName
      Environment:
        Variables:
          QUEUE_URL: !Ref MessageQueue
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /message
            Method: post

  # Consumer Lambda Function
  ConsumerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-consumer-function"
      CodeUri: src/consumer/
      Handler: lambda_function.lambda_handler
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt NotificationTopic.TopicName
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref NotificationTopic
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt MessageQueue.Arn
            BatchSize: 1

  # API Gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'POST,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

Outputs:
  ApiGatewayUrl:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/message"
    Export:
      Name: !Sub "${AWS::StackName}-api-url"

  QueueUrl:
    Description: SQS Queue URL
    Value: !Ref MessageQueue
    Export:
      Name: !Sub "${AWS::StackName}-queue-url"

  SnsTopicArn:
    Description: SNS Topic ARN
    Value: !Ref NotificationTopic
    Export:
      Name: !Sub "${AWS::StackName}-sns-topic-arn" 